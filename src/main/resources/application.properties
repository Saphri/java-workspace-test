# Streams and subjects are auto-created by default based on channel configuration
quarkus.messaging.nats.auto-configure=true

quarkus.messaging.nats.streams.events.pull-consumers.resource-events-consumer.consumer-configuration.filter-subjects=resource-event.*
quarkus.messaging.nats.streams.events.pull-consumers.resource-events-consumer.consumer-configuration.durable=true
quarkus.messaging.nats.streams.events.pull-consumers.resource-events-consumer.consumer-configuration.max-ack-pending=1
quarkus.messaging.nats.streams.events.pull-consumers.resource-events-consumer.consumer-configuration.max-deliver=5

quarkus.messaging.nats.streams.task-queue.retention-policy=work-queue
quarkus.messaging.nats.streams.task-queue.subjects=task.*

quarkus.messaging.nats.streams.events.retention-policy=work-queue
quarkus.messaging.nats.streams.events.discard-policy=new
quarkus.messaging.nats.streams.events.discard-new-per-subject=true
quarkus.messaging.nats.streams.events.maximum-messages-per-subject=1
quarkus.messaging.nats.streams.events.subjects=resource-event.*

# resource event
mp.messaging.incoming.resource-event-in.connector=quarkus-jetstream
mp.messaging.incoming.resource-event-in.stream=events
mp.messaging.incoming.resource-event-in.consumer=resource-events-consumer

mp.messaging.outgoing.resource-event-out.connector=quarkus-jetstream
mp.messaging.outgoing.resource-event-out.stream=events
mp.messaging.outgoing.resource-event-out.subject=resource-event.*

# task
#mp.messaging.incoming.task-queue-in.connector=quarkus-jetstream
#mp.messaging.incoming.task-queue-in.stream=task-queue
#mp.messaging.incoming.task-queue-in.subject=task.>
#mp.messaging.incoming.task-queue-in.trace-enabled=true
#mp.messaging.incoming.task-queue-in.durable=task-consumer
#mp.messaging.incoming.task-queue-in.max-ack-pending=1
#mp.messaging.incoming.task-queue-in.max-deliver=5

mp.messaging.outgoing.task-queue-out.connector=quarkus-jetstream
mp.messaging.outgoing.task-queue-out.stream=task-queue
mp.messaging.outgoing.task-queue-out.subject=task.*

# uncomment for using a NATS server when testing health restart
# docker run -p 4222:4222 nats -js
#quarkus.messaging.nats.devservices.enabled=false
#quarkus.messaging.nats.connection.servers=nats://localhost:4222
#quarkus.messaging.nats.connection.username=guest
#quarkus.messaging.nats.connection.password=guest
#quarkus.messaging.nats.connection.ssl-enabled=false

#%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus
#quarkus.oidc.client-id=backend-service
#quarkus.oidc.credentials.secret=secret

# Tell Dev Services for Keycloak to import the realm file
# This property is not effective when running the application in JVM or native modes
#quarkus.keycloak.devservices.realm-path=quarkus-realm.json

quarkus.otel.enabled=false